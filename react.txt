# React


🤔 **1.** **React란 무엇인가??**



React는 Meta가 만든 자바스크립트 라이브러리로, 사용자 인터페이스를 만드는 데 사용된다.

React는 **싱글 페이지 어플리케이션** (Single Page Application, SPA) 및 모바일 어플리케이션 개발을 위해 널리 채택되고 있다.


🤔 **2.** **SPA란 무엇인가??**



기존의 웹사이트는 사용자가 웹사이트 내의 다른 페이지로 이동하면, 브라우저가 페이지를 보여주기 위해 매번 HTML 파일로 된 **페이지 전체**를 불러와야만 했다.

기존의 웹사이트 처럼 중복된 요소들을 매번 불러오는 것은 서버와의 불필요한 트래픽을 발생시켰고 이로인해 페이지 전체가 새로고침되며, 서버로부터 응답이 오기를 기다려야 했다.

이것을 해결하기 위해 **`SPA`**라는 개념이 등장했다. **`SPA`**에서는 웹 애플리케이션의 대부분의 자원(`HTML, CSS, JavaScript`)은 한 번에 로드되며, `index.html` 하나만 가지고 렌더링한다. 또한 사용자의 요청에 따라 필요한 데이터만 서버로부터 받아와서 현재 페이지를 동적으로 업데이트한다. 이런 방식은 전체 페이지를 렌더링 할 필요가 없기 때문에 사용자 경험을 크게 향상시켰다.

여기서 어떻게 `index.html` 하나만 가지고 렌더링할 수 있는가하는 궁금증이 생길 수 있는데, 이는 **번들러**가 해결해 주고 있다.


🤔 **3.** **번들러(webpack)란 무엇인가??**



**번들러** `(webpack)`란, 웹 어플리케이션을 동작시키기 위한 자원들을 하나로 묶고 조합해서 하나의 정적인 결과물을 만드는 도구이다. 

하나로 묶여있지 않을 경우, 그만큼 서버에 필요한 자원을 여러번 요청해야 하는데, 하나로 묶어서 경량화 시켜주면 그만큼 서버에 가하는 부하도 적어지고 로딩시간도 높일 수 있어 성능적으로 유리하다.


🤔 **4.** **React의 작동원리는??**



React의 작동 원리를 이해하려면, **컴포넌트, 가상 DOM(Virtual DOM),  상태(state)와 속성(props)**에 대해 알아 볼 필요가 있다.

- **컴포넌트**
    
    React 애플리케이션은 작고 독립적인 코드 조각인 컴포넌트로 구성되며, 각 컴포넌트는 자체적인 마크업(Markup)과 로직을 가지며, 다른 컴포넌트에 쉽게 포함되거나 재사용될 수 있다.
    

- **가상 DOM**
    
    React는 브라우저에서 HTML DOM을 직접 조작하는 대신 가상 DOM을 사용하고 있다. **Javascrip 객체를 사용하여 메모리에 저장하며,** 컴포넌트의 상태값이 변경되면 새로운 가상DOM 객체를 만들고, 이전 가상DOM 객체와 비교한다. 변경 사항이 있으면 먼저 가상 DOM에 적용하고 이를 **실제 DOM과 비교하여 차이점만을 업데이트한다.** 이 방법을 통해 React는 불필요한 DOM 업데이트를 줄이고 성능을 향상시킬 수 있다.
    
    
    ☝ **가상 DOM의 저장 방식을 간단한 예시로 알아보자!!**
    
   
    
    HTML 코드
    
    ```html
    <div id="container">
        <h1 class="header">Hello, React!</h1>
        <p class="text">Welcome to React!</p>
        <ul class="list">
            <li>React 1</li>
            <li>React 2</li>
            <li>React 3</li>
        </ul>
    </div>
    ```
    
    가상 DOM의 JavaScript 객체
    
    ```jsx
    {
        type: 'div',
        props: {
            id: 'container'
        },
        children: [
            {
                type: 'h1',
                props: {
                    className: 'header'
                },
                children: ['Hello, React!']
            },
            {
                type: 'p',
                props: {
                    className: 'text'
                },
                children: ['Welcome to React!']
            },
            {
                type: 'ul',
                props: {
                    className: 'list'
                },
                children: [
                    {
                        type: 'li',
                        props: {},
                        children: ['React 1']
                    },
                    {
                        type: 'li',
                        props: {},
                        children: ['React 2']
                    },
                    {
                        type: 'li',
                        props: {},
                        children: ['React 3']
                    }
                ]
            }
        ]
    }
    ```
    

- **상태(state)와 속성(props)**
    
    React 컴포넌트는 **상태(state), 속성(props), redux store** 등의 데이터를 처리한다. 상태는 컴포넌트 내부에서 관리되며, 시간에 따라 변경될 수 있는 데이터를 나타낸다. 반면 속성은 부모 컴포넌트로부터 자식 컴포넌트로 전달되는 데이터를 나타내며, 컴포넌트 내부에서는 변경할 수 없다.
    
    컴포넌트의 상태나 속성이 변경되면 React는 이 변경 사항을 감지하고 관련 컴포넌트를 재렌더링한다. 이 때 가상 DOM이 활용되어 실제 DOM 업데이트는 최소화되고, 애플리케이션의 성능이 최적화되며 사용자 인터페이스를 효과적으로 업데이트하고 관리한다.
    


😀 **5. React의 장단점**



React 장단점을 정리해보자!!


🤔 **5-1. React의 장점은??**



- 전체 페이지가 아니라 필요한 부분의 데이터만 받아서 화면을 업데이트 하면 되기 때문에 사용자와 상호작용에 빠르게 반응한다.
- 서버에서는 요청 받은 데이터만 넘겨주면 되기 때문에 서버 과부하 문제가 현저하게 줄어든다.
- 전체 페이지를 렌더링 할 필요가 없기 때문에 더 나은 유저경험을 제공한다.
- React 공식 문서 가이드와 방대한 커뮤니티, 자료를 통해 쉽게 접하고 배울 수 있다.
- 다른 framework나 라이브러리와 병행해서 사용할 수 있다. 이는 개발이 이미 완료된 프로젝트에도 적절히 녹여낼 수 있는 확장성도 포함한다.
- `Controller, directive, template, model, view` 처럼 로직을 분리하는 것이 아닌, `Component`( `view` 역할을 담당 ) 하나로 관리를 하며, 코드의 재사용성을 높이고, 가독성을 개선하여 유지 관리가 쉽다.
- 리액트는 가상 DOM을 사용하여 UI를 효율적으로 업데이트하며, 이를 통해 브라우저의 실제 DOM에 직접 접근하는 비용을 줄이고 성능을 개선한다.


🤔 **5-2. React의 단점은??**



- `**SPA**`는 자바스크립트 파일의 크기가 크기 때문에 자바스크립트 파일을 기다리는 시간으로 인해 첫 화면 로딩 시간이 길어진다.
- 검색엔진최적화(`SEO`)가 좋지 않다. 검색 엔진은 HTML파일에 있는 자료를 분석하는 방식으로 검색 기능을 구동하고 있지만 `**SPA**`는 `HTML`파일의 별다른 자료가 없기 때문에 검색 엔진이 적절히 동작하지 못한다.
- IE8 이하 버전은 지원하지 않는다.
- 효과적인 리액트 개발을 위해서는 JavaScript, ES6 문법, JSX, 비동기 처리 등에 대한 충분한 이해가 필요하다.
- 리액트는 `view` 레이어에 초점을 맞춘 라이브러리라서, 상태 관리나 라우팅과 같은 기능을 위해서는 별도의 라이브러리를 사용해야 한다.
- 가상 DOM은 대부분의 경우에서 성능을 향상시키지만, 어떤 경우에는 (특히 대규모 리스트 렌더링 등) 성능 이슈를 일으킬 수 있다.