🍎 React의 작동 원리

----------------------------------------------
* 웹 페이지가 렌더링 되는 과정
1. HTML parser가 HTML을 바탕으로 DOM tree를 그린다.
2. CSS parser가 CSS를 바탕으로 CSSOM을 그린다.
3. DOM에 CSSOM을 적용하여 Render Tree를 그린다.
4. Render Tree를 바탕으로 Painting 하여 실제 화면에 렌더링 한다.
*HTML 코드를 읽어 내려가다가 <script></script> 태그를 만나면 파싱을 잠시 중단하고 js 파일을 로드한다.
---------------------------------------------- 라는디.. 일단은..이해 못함

리액트란? 
# "자바스크립트의 UI 라이브러리이다"
1. 컴포넌트의 상태값이 변경될 때마다 UI를 자동으로 업데이트 해주는 JS 라이브러리이다.
    - 즉, state, props, redux store 등의 상태값이 변경되면,
      리액트가 해당 컴포넌트 함수를 자동으로 재호출하여 재렌더링 해준다.

2. 가상DOM을 통해 변경된 부분만 효율적으로 업데이트해주는 구조이다.
    - 가상DOM은 실제DOM을 분석하여 만든 Javascript 객체이다.
    - 컴포넌트의 상태가 변경되면, 가상돔은 두개이다. 1, 랜더링 이전 2. 랜더링 이후 이렇게..
      새로운 가상DOM 객체를 만들고, 이전 가상DOM 객체와 비교한다. => diffing
      최종적으로 바뀐 부분이 있을 경우, 해당 부분만 실제DOM에 반영하여 UI를 업데이트한다. => Reconsiliation(재조정)
      

그래서~
리액트는 DOM 관리 및 상태 값 업데이트 관리 등의 작업을 최소화 할 수 있게 만들어주는 라이브러리


# Virtual DOM 이란?
Virtual DOM = 가상 DOM 처리
가상에서 DOM을 처리하므로 실제 HTML, CSS DOM 트리에 영향을 주지 않는다.
Vitual DOM은 리 랜더링 과정이 필요 없기 때문에 연산 비용이 Real DOM보다 적다.
연산이 끝난 후, 최종적인 변화만 딱 한번 전달한다.

속도적인 부분과 많은 일을 수행하다 버그가 발생하거나 브라우저가 죽는 일 등등의 일을 개선하고자
가상돔(Virtual DOM)이 나왔다고한다.
속도적인 부분은 일반 자바스크립트의 코드양이 많아서 그만큼 랜더링이 오래 걸리거나 버그가 많기때문인가..???

----------------------------------------------
(예시) 이것 복붙햇서요..

function HelloMessage(){
  const [name, setName] = React.useState('foo');
  
    return (
      <div>Hello {name}</div>
    );
}

ReactDOM.render(<HelloMessage name="bar" />, mountNode)

(예시) React VDOM의 작동 과정
1. HelloMessage 에서 'Hello foo' 를 return하여 렌더링 중
2. state의 name이 'bar'로 변경
3. state값이 변경되었기 때문에 render 함수를 재호출
4. HelloMessage에서 'Hello bar'를 return
5. Virtual DOM에서 변경된 내용(name)을 감지, 해당 <div>안의 내용을 DOM에서 수정
6. 브라우저에서 변경 값을 감지하고 새로운 화면 렌더링
----------------------------------------------

🍎 React의 장점

1. 빠른 업데이트와 렌더링 속도
  - React에서는 빠른 업데이트를 위해서 Virtual DOM을 사용하는데,
    가상돔은 웹페이지와 실제 DOM 사이에서 중간 매개체의 역할을 한다.
    
    즉, 화면이 업데이트(새로고침)된다는 말은 DOM이 수정된다는 말인데 기존방식은 성능과
    비용적인 측면에서 많이 드는 작업이다.

    반면에 react는 DOM을 직접 수정하는 것이 아니라 업데이트 해야할 최소한의 부분만 찾아 변경한다.
    어떤 DOM 상태의 변경이 일어나야한다면 가상돔에서는 변경해야할 최소한의 부분을 검색(Compute Diff)한다.
    검색한 부분만을 업데이트하고 렌더링 한다.

2. Component의 가독성이 매우 높고 간단하여 쉬운 유지보수, 간편한 UI 수정 및 재사용 용이

  - 리액트는 모든 페이지가 컴모넌트로 구성되어져 있고 하나의 컴포넌트는 다른 여러개의 컴포넌트로 구성되어 질 수 있다.   
    따라서, 리액트로 개발하다 보면 레고를 조립하는 것처럼 컴포넌트들을 조합해서 웹사이트들을 개발하게 되어 코드의 재사용성이 증가한다.
    이는 곧 개발기간 단축과 유지보수의 용이로 이어진다.

3. 뛰어난 Garbage Collection, 메모리 관리, 성능을 가지고 있다.

4. 활발한 지식공유 및 커뮤니티 - 는 아직 이해가 안되서... 안적을래

5. React Native -??? 이것도 아직.. 이해못해
  - 모바일 웹을 만들도록 도와주는 라이브러리 

6. 파일의 구조나 순환? 을 잘 이해하면 쉽게 수정이나 추가 재사용이 용이할 것 같다


🍎 React의 단점

1. 방대한 학습량과 새로운 버전에 대한 학습 요구 (새로 공부할게 많다) //러닝커브??

2. 높은 상태관리 복잡도
  - 리액트에서는 State라는 개념이 존재하는데 이는 컴포넌트의 상태를 의미한다.
    가상돔에서 바뀐 부분만을 찾아서 업데이트한다고 했는데 즉, State가 바뀐부분만을 찾는것이고
    리액트에서 State라는 개념은 굉장히 중요한 개념이다.

    리액트에서는 웹사이트의 규모가 커져서 컴포넌트의 개수가 많아지면 상태관리의 복잡도도 증가한다.

3. 앱의 규모가 커지면 속도가 느려진다.

4. 파일명이 비슷하고 파일 또한 많다보니 정리를 잘 하지 않으면 이파일 저파일 다 열어보게 생겼다..

5. 설치 프로그램을 제대로 설치해도 작동이 안되는 경우가 있었다. json 파일에도 설치 되어있지만,
   오류가 생기는 일이 많기 때문에 재설치 또는 재확인이 필요하다.













* 용어정리
번들링(bundling) : webpack 은 이렇게 import(혹은 require) 한 모듈들을 불러와서 한 파일로 합치는 작업
프롭스(props) : 변수
Props: 부모 컴포넌트에서 자식 컴포넌트로 전달해주는 데이터이다. 
       자식 컴포넌트에서 전달 받은 props는 변경이 불가능하고 props를 전달해준 최상위 부모 컴포넌트만 props를 변경할 수 있다.

State: 사용자와의 상호작용을 통해 데이터를 동적으로 변경해야 하는 것과 같이 동적인 데이터를 다룰 때 사용한다. 
root : 리엑트에서 "root"란, 리엑트 앱이 엘레멘트를 추가하고 추적하는 최상위 레벨의 데이터 구조이다.

* 파일 역할
favicon.icon : 웹사이트의 상단에 위치하는 '파비콘' 이미지입니다.
index.html : 가상 DOM을 위한 html 파일입니다. (빈 껍데기 파일)
manifest.json : 앱 스토어없이 기기의 홈화면에 설치할 수 있는 웹 사이트입니다
app.css : app.js에 대한 css 파일
app.js : 보여질 코드를 작성하는 작업 파일
app.test.js : react 구성 요소를 테스트하는데 사용되는 파일
index.js : index.html와 비슷하게 가장 상위, 메인이 되는 파일





