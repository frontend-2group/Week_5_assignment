

<DOM 이란?>
-> HTML의 태그 요소 하나하나를 말함 

<가상 Dom>
- Virtual DOM = 가상 DOM 처리
- 가상에서 DOM을 처리하므로 실제 HTML, CSS DOM 트리에 영향을 주지 않습니다.
- Vitual DOM은 리 랜더링 과정이 필요 없기 때문에 연산 비용이 Real DOM보다 적습니다.
- 연산이 끝난 후, 최종적인 변화만 딱 한번 전달해줍니다.

<리엑트의 장점>

1. 가독성과 유지보수가 좋다
    -> 컴포넌트의 구조를 명확히 표현 할 수 있어서 개발자들은 더 쉽게 코드를 이해하고 유지보수가 쉽다
    ex) 스타일 따로 만들고, 페이지 별로 나눌 수 있고 등등..
    -> 재사용 가능한 UI를 만들 수 있다.
    ex) 수업시간에 만들었던 버튼 부분 !
    -> 상태값이 변경될 때마다 UI를 자동으로 업데이트해주는 JS 라이브러리

2. 리엑트는 라이브러리기 때문에 다른 라이브러리나 프레임워크도 함께 사용 가능
ex) styled-components, react-router-dom , reset-css 
3. 리엑트로 개발하면 리엑트 네이티브로 앱 개발도 가능
4. 상태나 속성 값이 변하게 되면 리렌더링 이라는 과정을 통해서 화면에서의 값을 업데이트 시켜준다.
    -> React는 값이 변할 때 화면의 깜빡임 없이 빠른 속도로 값을 변경 시키는데, 그 이유가 바로 Virtual DOM 때문

<리엑트의 동작원리>

리엑트는 Dom 엘리먼트를 직접 조작하지 않고 가상 Dom을 생성하여 브라우저가 이를 렌더링 하도록 하는 방식
가상 Dom은 html 엘리먼트와 비슷하지만 실제로는 자바스크립트의 객체이다.

-가상돔을 통한 장점 
    
    ->html의 dom api를 다루는 것 보다 자바스크립트이 객체인 가상dom을 다루는 것이 훨씬 빠르다.
    
    왜냐하면 dom 변화가 일어나면 웹브라우저가 css를 다시 연산하고, 레이아웃을 구성하고, 페이지를 렌더링이 
    일이어나는 이 과정에서 시간이 허비되므로 바뀐 속성값만 연산이 끝난 후, 최종적인 변화만 딱 한번 깜빡임 없이 전달해준다
    (실제로 작업하는 사람이 real dom으로 사용하면서 프로젝트를 키웠을 때 1~3초 이상 속도가 느려지는 것을 경험했다고 함)

<리엑트의 단점>

1. IE8 이하는 지원이 안된다
2. 컴포넌트를 잘 나누고 명확히 정리해 놔야한다.
3. 러닝커브가 높다
ex) 나중에 유지보수 할 때는 유용하겠지만 처음 사용하는 나에게는 css 적용이 어렵다.. 
4. 설치 프로그램을 제대로 설치해도 작동이 안되는 경우가 있었다. json 파일에도 설치 되어있지만,
오류가 생기는 일이 많기 때문에 재설치 또는 재확인이 필요하다


