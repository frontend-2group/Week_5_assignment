 DOM =  Document Object Model
    -> 웹 브라우저가 HTML 페이지를 인식하는 방식
        -> document 객체와 관련된 객체의 집합

node -> tree 구조에서 root 노드를 포함한 모든 개개의 개체
    : HTML 태그를 요소노드(Element Node)


* React 사용이유?
 - 배경 : 사용자의 요구에 따라 오늘날 돔트리가 매우 거대해짐 
        -> Web App 크가기 커지면서 JS파일들 통제가 어려워짐
        -> 효울적인 관리를 위해 backbone.js 같은 라이브러리 등장
        -> 그러면서 HTML,CSS, JS에서 JS의 역할이 더욱더 중요해짐
        -> SPA 등장 : HTML 파일 1개만 쓰고 다른 페이지 처럼 보이고 싶음
        -> 트래픽 총량을 줄이고 웹 사용성 높임. 속도는 더 빠름

* 중요한점?
Virtual DOM 사용
    : 실제 DOM이 아닌 중간에 Virtual DOM이라는 가상 동을 두어 가상 돔의 state가 변경될때,
     실제 돔이 변경하도록 설계
    -> 불필요한 렌더링 과정을 최소화하기위해 탄생

    state란?
        : setState() 컴포넌트의 state 객체의 대한 업데이트가 실행. 
            state가 변경되면 컴포넌트는 리랜더링

Component 단위 개발
    컴포넌트란? 
        : 레고블럭과 같은 작은 단위로 개발, 조립하듯이 합치는것
        ->  가독성이 높고 간단, 캡슐화, 확장, 결합, 재사용성


*React의 장단점 

장점 : 1. 리엑트 안에서 HTML,CSS JS조작이 가능한 언어(JSX)로 바뀌어서만들기 편리하다 
      2. 컴퍼넌트 단위로 개발하다보니 재사용, 확장이 가능하다 -> 유지보수, 가독성이 좋음
      3. 상태, 속성이 변화하면 리랜더링 되기때문에 중간 화면 업데이트 속도가 빠르다 
        (-> 업데이트 랜더링 속도 빠름)
      4. 현재 많이 사용하는 언어 중 하나라 정보가 많음 ,공식 문서 가이드도 존재


단점 : 
    1. 러닝커브가 높다 (HTML, CSS, JS등 기본적인 개념을 알고있어야함, 그뒤로도 공부할게 한가득)
    2. 컴퍼넌트 단위로 개발하다보니 정리를 잘해야할듯함
        : 파일 이름, 경로등 파악을 잘해야함
    3. 처음 랜더링 속도가 느릴수 있음
    4. IE8 이하는 지원이 불가
    5. 설치 프로그램 작동시 오류부분 확인이 어렵다. 
        (-> 파일이 깔렸다고 나오는데 오류가 계속 생김 -> 지우고 다시 설치하니까 작동)
    


state vs props 

props : properties의 줄임말

공통점 : 일반 JS객체
        랜더링 결과물에 영행을 주는 정보를 가지고 있음
        결정론적 
        (구성 요소가 동일한 props 및 state 조합에 대해 다른 출력을 생성하는 경우 잘못된 작업을 수행하고 있는 것)

차이점 
    props : 컴포넌트에 전달 -> 함수의 매개변수처럼
    state : 컴포넌트 안에서 관리 -> 함수내 선언된 변수