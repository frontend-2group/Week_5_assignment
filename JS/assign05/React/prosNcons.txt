

React의 작동원리와 장점, 단점

React의 작동원리: CSR & SPA

장점:
        1. virtual DOM(가상 DOM)으로 인한 빠른 update와 rendering 속도
                >>  브라우저 화면을 렌더링하는데 시간이 오래 소요되는 만큼 이용자들은 기다리지 못하고 이탈하게 됨
                    리액트는 state(상태)가 변경된 부분만 빠르게 수정해 보여줘 성능과 비용의 손실을 최소화한다.
                    ex.
                            실제 DOM 조작: document.querySelector('').style.color = '';
                                            >> 해당 element 검색  > 변경하고자한 element와 그의 자녀 element를 일괄 삭제 > 변경 후 추가 > 브라우저에 다시 렌더
                                                매번 UI를 새롭게 생성해 브라우저에 렌더링하는 것은 시간이 소요되는 복잡한 작업

                            가상 DOM 조작: DOM의 복사본이기 때문에 API가 없음. 
                                         리액트는 2개의 가상 DOM(렌더링 이전, 렌더링 이후)을 보유 > state가 변경될 때마다 re-render
                                         reconciliation(재조정) 과정:
                                            화면을 렌더링하기 전에 Diffing (두 개를 비교해서 변경된 element를 찾아 그 부분만 실제 DOM에 적용)을 통한 "Batch Update" (변경된 element를 한꺼번에 모두 적용) 


        2. component를 기반(component-based)으로 한 모듈 방식 
                >>  재사용성(reusability)이 높아 유지 보수에 용이하고 개발 기간을 단축시킨다. 
                    (유지보수에 용이 == 버그 원인을 찾기 쉽다.)

                    ex.
                        import styled from "styled-components";
                        import SignInForm from "./components/SignInForm";
                        import SignUpForm from "./components/SignUpForm";
                        import { flexCenter } from "styles/common.style";

                        return (
                                <S.Wrapper>
                                        <S.Header>
                                                <S.SignInSelector onClick={onChangeForm}>SIGN-IN</S.SignInSelector>
                                                <S.SignUpSelector onClick={onChangeForm}>SIGN-UP</S.SignUpSelector>
                                        </S.Header>
                                        {isFormLogin ? <SignInForm /> : <SignUpForm />}
                                </S.Wrapper>
                        );


        3. React + React-native , app 발행의 용이
                >>  JS로 안드로이드와 IOS 동시 개발 가능


        4. Meta가 지원
                >>  대기업이 지원하기 때문에 안정성이 높음
                    활발한 지식공유와 커뮤니티가 잘 이루어져 있음 (git: https://github.com/facebook/react / stackOverflow)



단점:
        1. 끊임없는 학습 필요
                >>  문법이 어려워 진입장벽이 높음
                    view only 라이브러리이기 때문에 다른 라이브러리를 많이 활용해야 함 > 활용을 하려면 이것도 공부해야 함
                    최신 버전으로 업데이트될 때마다 새로운 문법 등을 계속 공부해야 함

        2.  state 관리가 어려움
                >>  성능 최적화를 위해 state를 잘 관리해야 하는데, 처음엔 어려움. 익숙해지기까지 시간이 다소 소요될 수 있음
                    규모가 큰 프로젝트일 경우, 다뤄야할 component의 양이 많아져 관리가 어려움 > 외부 상태관리 라이브러리를 활용(ex. redux) > 활용하려면 공부해야 함 


